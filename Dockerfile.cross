# Build the openagent binary
FROM --platform=${BUILDPLATFORM} golang:1.24.3 AS builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# Copy gointernal directory first since it's referenced as a local replacement in go.mod
COPY gointernal/ gointernal/
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY main.go main.go
COPY open/ open/
COPY pkg/ pkg/
COPY util/ util/
COPY tools/ tools/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make docker-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
ARG VERSION=dev
ARG BUILD_TIME=unknown

RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} \
    go build -ldflags "-X main.version=${VERSION} -X main.commitHash=${BUILD_TIME}" \
    -o openagent main.go

# Use alpine as base image to package the openagent binary
FROM alpine:3.19
WORKDIR /app
RUN apk --no-cache add ca-certificates bash curl

# Copy the binary and configuration files
COPY --from=builder /workspace/openagent /app/openagent
COPY scrape_config.yaml /app/scrape_config.yaml
COPY whatap.conf /app/whatap.conf

RUN mkdir -p /app/logs
ENV WHATAP_HOME=/app

ENTRYPOINT ["/app/openagent"]
CMD ["foreground"]
